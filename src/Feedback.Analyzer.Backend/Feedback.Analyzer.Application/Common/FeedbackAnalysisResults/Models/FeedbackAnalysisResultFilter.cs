using Feedback.Analyzer.Domain.Common.Query;

namespace Feedback.Analyzer.Application.Common.FeedbackAnalysisResults.Models;

/// <summary>
/// Represents a filter for retrieving feedback analysis results.
/// This filter inherits from a base class likely providing common pagination functionalities.
/// </summary>
public class FeedbackAnalysisResultFilter : FilterPagination
{
    /// <summary>
    /// Initializes a new instance of the <see cref="FeedbackAnalysisResultFilter"/> class
    /// with default values for page size and token, potentially retrieving all results without pagination.
    /// </summary>
    public FeedbackAnalysisResultFilter()
    {
        PageSize = int.MaxValue;
        PageToken = 1;
    }

    /// <summary>
    /// Provides a hash code for this filter instance based on its page size and token.
    /// </summary>
    /// <returns>An integer hash code.</returns>
    public override int GetHashCode()
    {
        var hashCode = new HashCode();
        
        hashCode.Add(PageSize);
        hashCode.Add(PageToken);
        
        return hashCode.ToHashCode();
    }

    /// <summary>
    /// Compares the current object with another object for equality.
    /// It checks if the other object is of type `Domain.Entities.FeedbackAnalysisResult` (potentially the base class for this filter)
    /// and compares their hash codes generated by the `GetHashCode` method.
    /// </summary>
    /// <param name="obj">The object to compare with.</param>
    /// <returns>True if the objects are equal, false otherwise.</returns>
    public override bool Equals(object? obj)
    {
        return obj is Domain.Entities.FeedbackAnalysisResult feedbackAnalysisResult &&
               feedbackAnalysisResult.GetHashCode() == GetHashCode();
    }
}
